}
PlotBarChart(lala, 'calories', 1, 25)
filtered11 <- arrange(lala, -calories)
filtered11 <- filter(filtered11, calories > 1, calories < 25)
View(filtered11)
filtered11 <- arrange(lala, -calories)
filtered11 <- arrange(lala, -calories) %>% select(name, calories)
PlotBarChart <- function(data, interest, range1, range2){
filtered <- arrange(data, -data[, interest]) %>% select(name, filitered[,interest])
filtered <- filtered[range1:range2,]
p <- plot_ly(filtered, x = ~name, y = ~filtered[, interest], type = 'bar', name = 'Cereal') %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
return(p)
}
PlotBarChart(lala, 'calories', 1, 25)
PlotBarChart <- function(data, interest, range1, range2){
filtered <- arrange(data, -data[, interest]) %>% select(name, interest)
filtered <- filtered[range1:range2,]
p <- plot_ly(filtered, x = ~name, y = ~filtered[, interest], type = 'bar', name = 'Cereal') %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
return(p)
}
PlotBarChart(lala, 'calories', 1, 25)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='quyuan', token='19030061114381331D2F537ECB4C7840', secret='JneIRxI+BnlHVeNqLqqDnqXQCihspw+K+Hv0/B47')
shiny::runApp()
install.packages('rsconnect')
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
setwd("~/Desktop/Info_201/a8-building-apps-quyuancatherine")
library(rsconnect)
deployApp()
shiny::runApp()
runApp()
deployApp()
shiny::runApp()
library(shiny)
source('plot.R')
setwd("~/Desktop/Info_201/Group-Project-EasyA/Analyze_department_GPA")
library(shiny)
source('plot.R')
lala <- read.csv("~/Desktop/Info_201/Group-Project-EasyA/full_data.csv")
View(lala)
library(plotly)
library(shiny)
library(plotly)
lala <- read.csv("~/Desktop/Info_201/Group-Project-EasyA/full_data.csv")
department.name <- unique(lala$department_name)
department.name
??lapply
lala.2 <- lala
for(i in lala.2) {
substr(i, 1, 4)
}
lala.2 <- lala
for(i in lala.2$Academic_Year) {
substr(i, 1, 4)
}
View(lala.2)
lala.2 <- lala
for(i in lala.2$Academic_Year) {
substr(i, 1, 4)
}
string <- substr('abcde', 1, 3)
string
typeof(lala$Academic_Year)
lala.2$Academic_Year <- as.character(lala.2$Academic_Year)
typeof(lala.2$Academic_Year)
lala.2$Academic_Year <- substr(lala.2$Academic_Year, 1, 4)
filter.department <- filter(lala.2, department_name == 'Informatic')
filter.department$Academic_Year <- as.character(filter.department$Academic_Year)
filter.department$Academic_Year <- substr(filter.department$Academic_Year, 1, 4)
View(filter.department)
library(plotly)
library(dplyr)
PlotBarChart <- function(data, interest, select.time){
filter.department <- filter(data, department_name == interest)
filter.department$Academic_Year <- as.character(filter.department$Academic_Year)
filter.department$Academic_Year <- substr(filter.department$Academic_Year, 1, 4)
filter.department <- filter(filter.department, Academic_Year == select.time)
p.1 <- plot_ly(filtered, x = ~name, y = ~filtered[, interest], type = 'bar', name = 'Cereal') %>%
layout(xaxis = list(
title = "Creal Brands",
tickfont = list(
size = 1)),
yaxis = list(title = 'calories per serving'),barmode = 'group')
p <- plot_ly(filter.department, x = ~Course_Number, y = ~Average_GPA, type = 'scatter', mode = 'lines')
return(p)
}
runApp()
setwd("~/Desktop/Info_201/Group-Project-EasyA/Analyze_department_GPA")
setwd("~/Desktop/Info_201/Group-Project-EasyA/Analyze_department_GPA")
setwd("~/Desktop/Info_201/Group-Project-EasyA/Analyze_department_GPA")
runApp()
source('plot.R')
runApp()
runApp('~/Desktop/Info_201/a8-building-apps-quyuancatherine')
library(shiny)
library(plotly)
lala <- read.csv("~/Desktop/Info_201/Group-Project-EasyA/full_data.csv")
department.name <- unique(lala$department_name)
shinyUI(fluidPage(
titlePanel("Department GPA"),
sidebarLayout(
sidebarPanel(
helpText("Create a bar plot by choosing your department of interest"),
selectInput("department",
label = "choose a department to display",
choices = department.name,
selected = "Aeronautics & Astronautics"),
helpText(p('By choosing the time range, the plot will only display the department of
your interest within that time range.')),
selectInput("time",
label = "choose a time range to display",
choices = c('2010', '2011', '2012', '2013', '2014', '2015'),
selected = '2010'),
mainPanel(plotlyOutput("chart"))
)
)))
library(shiny)
library(plotly)
shinyUI(fluidPage(
titlePanel("Cereals"),
sidebarLayout(
sidebarPanel(
helpText("Create a bar plot by choosing your value of interest"),
selectInput("var",
label = "choose a variable to display",
choices = c("calories", "sodium",
"sugars", "rating"),
selected = "calories"),
helpText(p('By changing the ranking, the plot will only display the value of
your interest within that range. For example, if you choose calories as
your variable, and you choose the ranking from 1 to 30, then the plot will
only show calorie content ranking top30.')),
sliderInput("range",
label = "ranking of your interest:",
min = 1, max = 77, value = c(1, 77))
),
mainPanel(plotlyOutput("chart"))
)
))
typeof(department.name)
runApp()
lala <- read.csv("full_data.csv")
runApp()
setwd("~/Desktop/Info_201/Group-Project-EasyA/Analyze_department_GPA")
runApp()
setwd("~/Desktop/Info_201/Group-Project-EasyA/Analyze_department_GPA")
runApp()
runApp()
source('./scripts/plot.R')
View(PlotChart)
runApp()
runApp()
runApp()
runApp()
department.name
runApp()
runApp()
runApp('~/Desktop/Info_201/a8-building-apps-quyuancatherine')
setwd("~/Desktop/Info_201/Group-Project-EasyA/Analyze_department_GPA")
runApp()
runApp()
View(filter.department)
la <- PlotChart(lala, 'Public Health', '2012')
la
la <- PlotChart(lala, 'Biology', '2012')
la
PlotChart <- function(data, interest, select.time){
filter.department <- filter(data, department_name == interest)
filter.department$Academic_Year <- as.character(filter.department$Academic_Year)
filter.department$Academic_Year <- substr(filter.department$Academic_Year, 1, 4)
filter.department <- filter(filter.department, Academic_Year == select.time)
p <- plot_ly(filter.department, x = ~Course_Number, y = ~Average_GPA, type = 'scatter'
, mode = 'lines+markers')
return(p)
}
la <- PlotChart(lala, 'Biology', '2012')
la
library(plotly)
library(dplyr)
PlotChart <- function(data, interest, select.time){
filter.department <- filter(data, department_name == interest)
filter.department$Academic_Year <- as.character(filter.department$Academic_Year)
filter.department$Academic_Year <- substr(filter.department$Academic_Year, 1, 4)
filter.department <- filter(filter.department, Academic_Year == select.time)
p <- plot_ly(filter.department, x = ~Course_Number, y = ~Average_GPA, type = 'scatter',
color = ~Average_GPA, size = ~Average_GPA)
return(p)
}
la <- PlotChart(lala, 'Biology', '2012')
la
PlotChart <- function(data, interest, select.time){
filter.department <- filter(data, department_name == interest)
filter.department$Academic_Year <- as.character(filter.department$Academic_Year)
filter.department$Academic_Year <- substr(filter.department$Academic_Year, 1, 4)
filter.department <- filter(filter.department, Academic_Year == select.time)
p <- plot_ly(filter.department, x = ~Course_Number, y = ~Average_GPA, type = 'scatter',
mode = 'markers', color = ~Average_GPA, size = ~Average_GPA)
return(p)
}
la <- PlotChart(lala, 'Biology', '2012')
la
PlotChart <- function(data, interest, select.time){
filter.department <- filter(data, department_name == interest)
filter.department$Academic_Year <- as.character(filter.department$Academic_Year)
filter.department$Academic_Year <- substr(filter.department$Academic_Year, 1, 4)
filter.department <- filter(filter.department, Academic_Year == select.time)
p <- plot_ly(filter.department, x = ~Course_Number, y = ~Average_GPA, type = 'scatter',
mode = 'lines')
return(p)
}
la <- PlotChart(lala, 'Biology', '2012')
la
PlotChart <- function(data, interest, select.time){
filter.department <- filter(data, department_name == interest)
filter.department$Academic_Year <- as.character(filter.department$Academic_Year)
filter.department$Academic_Year <- substr(filter.department$Academic_Year, 1, 4)
filter.department <- filter(filter.department, Academic_Year == select.time)
p <- plot_ly(data = filter.department, x = ~Course_Number, y = ~Average_GPA)
return(p)
}
la <- PlotChart(lala, 'Biology', '2012')
la
PlotChart <- function(data, interest, select.time){
filter.department <- filter(data, department_name == interest)
filter.department$Academic_Year <- as.character(filter.department$Academic_Year)
filter.department$Academic_Year <- substr(filter.department$Academic_Year, 1, 4)
filter.department <- filter(filter.department, Academic_Year == select.time)
p <- plot_ly(data = filter.department, x = ~Course_Number, y = ~Average_GPA,
type = 'scatter', mode = 'markers')
return(p)
}
la <- PlotChart(lala, 'Biology', '2012')
la
PlotChart <- function(data, interest, select.time){
filter.department <- filter(data, department_name == interest)
filter.department$Academic_Year <- as.character(filter.department$Academic_Year)
filter.department$Academic_Year <- substr(filter.department$Academic_Year, 1, 4)
filter.department <- filter(filter.department, Academic_Year == select.time)
p <- plot_ly(data = filter.department, x = ~Course_Number, y = ~Average_GPA,
type = 'scatter', mode = 'markers', color = ~Average_GPA)
return(p)
}
la <- PlotChart(lala, 'Biology', '2012')
la
PlotChart <- function(data, interest, select.time){
filter.department <- filter(data, department_name == interest)
filter.department$Academic_Year <- as.character(filter.department$Academic_Year)
filter.department$Academic_Year <- substr(filter.department$Academic_Year, 1, 4)
filter.department <- filter(filter.department, Academic_Year == select.time)
p <- plot_ly(data = filter.department, x = ~Course_Number, y = ~Average_GPA,
type = 'scatter', mode = 'markers', size = ~Average_GPA)
return(p)
}
la <- PlotChart(lala, 'Biology', '2012')
la
typeof(lala$Average_GPA)
la <- PlotChart(lala, 'Psychology', '2012')
la
PlotChart <- function(data, interest, select.time){
filter.department <- filter(data, department_name == interest)
filter.department$Academic_Year <- as.character(filter.department$Academic_Year)
filter.department$Academic_Year <- substr(filter.department$Academic_Year, 1, 4)
filter.department <- filter(filter.department, Academic_Year == select.time)
p <- plot_ly(data = filter.department, x = ~Course_Number, y = ~Average_GPA,
type = 'scatter', mode = 'markers', size = ~Average_GPA) %>%
layout(xaxis = list(tickfont = list(size = 1)))
return(p)
}
la <- PlotChart(lala, 'Psychology', '2012')
la
View(filter.department)
PlotChart <- function(data, interest, select.time){
filter.department <- filter(data, department_name == interest)
filter.department$Academic_Year <- as.character(filter.department$Academic_Year)
filter.department$Academic_Year <- substr(filter.department$Academic_Year, 1, 4)
filter.department <- filter(filter.department, Academic_Year == select.time)
filter.department <- mutate(filter.department, added = paste(filter.department$Course_Number, filter.department$Course_Title))
p <- plot_ly(data = filter.department, x = ~added, y = ~Average_GPA,
type = 'scatter', mode = 'markers', size = ~Average_GPA) %>%
layout(xaxis = list(tickfont = list(size = 1)))
return(p)
}
la <- PlotChart(lala, 'Psychology', '2012')
la
PlotChart <- function(data, interest, select.time){
filter.department <- filter(data, department_name == interest)
filter.department$Academic_Year <- as.character(filter.department$Academic_Year)
filter.department$Academic_Year <- substr(filter.department$Academic_Year, 1, 4)
filter.department <- filter(filter.department, Academic_Year == select.time)
filter.department <- mutate(filter.department,
added = paste(filter.department$Course_Number, ':', filter.department$Course_Title))
p <- plot_ly(data = filter.department, x = ~added, y = ~Average_GPA,
type = 'scatter', mode = 'markers', size = ~Average_GPA) %>%
layout(xaxis = list(tickfont = list(size = 1)))
return(p)
}
la <- PlotChart(lala, 'Psychology', '2012')
la
PlotChart <- function(data, interest, select.time){
filter.department <- filter(data, department_name == interest)
filter.department$Academic_Year <- as.character(filter.department$Academic_Year)
filter.department$Academic_Year <- substr(filter.department$Academic_Year, 1, 4)
filter.department <- filter(filter.department, Academic_Year == select.time)
filter.department <- mutate(filter.department,
added = paste(filter.department$Course_Number, ':', filter.department$Course_Title))
p <- plot_ly(data = filter.department, x = ~added, y = ~Average_GPA,
type = 'scatter', mode = 'markers', size = ~Average_GPA) %>%
layout(xaxis = list(tickfont = list(size = 1)))
return(p)
}
la <- PlotChart(lala, 'Mathematics', '2012')
la
library(shiny)
source('./scripts/plot.R')
lala <- read.csv("full_data.csv")
library(plotly)
shinyServer(
function(input, output) {
output$chart <- renderPlotly({
PlotChart(lala, input$department, input$time)
})
}
)
library(shiny)
library(plotly)
lala <- read.csv("full_data.csv")
department.name <- unique(lala$department_name)
shinyUI(fluidPage(
titlePanel("Department GPA"),
sidebarLayout(
sidebarPanel(
helpText("Create a bar plot by choosing your department of interest"),
selectInput("department",
label = "choose a department to display",
choices = department.name,
selected = "Aeronautics & Astronautics"),
helpText(p('By choosing the time range, the plot will only display the department of
your interest within that time range.')),
selectInput("time",
label = "choose a time range to display",
choices = c('2010', '2011', '2012', '2013', '2014', '2015'),
selected = '2010'),
),
mainPanel(plotlyOutput("chart"))
)
))
library(shiny)
library(plotly)
lala <- read.csv("full_data.csv")
department.name <- unique(lala$department_name)
shinyUI(fluidPage(
titlePanel("Department GPA"),
sidebarLayout(
sidebarPanel(
helpText("Create a bar plot by choosing your department of interest"),
selectInput("department",
label = "choose a department to display",
choices = department.name,
selected = "Aeronautics & Astronautics"),
helpText(p('By choosing the time range, the plot will only display the department of
your interest within that time range.')),
),
mainPanel(plotlyOutput("chart"))
)
))
library(plotly)
library(dplyr)
PlotChart <- function(data, interest, select.time){
filter.department <- filter(data, department_name == interest)
filter.department$Academic_Year <- as.character(filter.department$Academic_Year)
filter.department$Academic_Year <- substr(filter.department$Academic_Year, 1, 4)
filter.department <- filter(filter.department, Academic_Year == select.time)
filter.department <- mutate(filter.department,
added = paste(filter.department$Course_Number, ':', filter.department$Course_Title))
p <- plot_ly(data = filter.department, x = ~added, y = ~Average_GPA,
type = 'scatter', mode = 'markers', size = ~Average_GPA) %>%
layout(xaxis = list(tickfont = list(size = 1)))
return(p)
}
la <- PlotChart(lala, 'Mathematics', '2012')
la
library(shiny)
library(plotly)
lala <- read.csv("full_data.csv")
department.name <- unique(lala$department_name)
shinyUI(fluidPage(
titlePanel("Department GPA"),
sidebarLayout(
sidebarPanel(
helpText("Create a bar plot by choosing your department of interest"),
selectInput("department",
label = "choose a department to display",
choices = department.name,
selected = "Aeronautics & Astronautics"),
helpText(p('By choosing the time range, the plot will only display the department of
your interest within that time range.')),
selectInput("time",
label = "choose a time range to display",
choices = c('2010', '2011', '2012', '2013', '2014', '2015'),
selected = '2010'),
),
mainPanel(plotlyOutput("chart"))
)
))
runApp()
system("export Lang=C")
library(shiny)
library(plotly)
lala <- read.csv("full_data.csv")
department.name <- unique(lala$department_name)
shinyUI(fluidPage(
titlePanel("Department GPA"),
sidebarLayout(
sidebarPanel(
helpText("Create a bar plot by choosing your department of interest"),
selectInput("department",
label = "choose a department to display",
choices = department.name,
selected = "Aeronautics & Astronautics"),
helpText(p('By choosing the time range, the plot will only display the department of
your interest within that time range.')),
selectInput("time",
label = "choose a time range to display",
choices = c('2010', '2011', '2012', '2013', '2014', '2015'),
selected = '2010'),
),
mainPanel(plotlyOutput("chart"))
)
))
Sys.setenv(LANG = "en")
library(shiny)
library(plotly)
lala <- read.csv("full_data.csv")
department.name <- unique(lala$department_name)
shinyUI(fluidPage(
titlePanel("Department GPA"),
sidebarLayout(
sidebarPanel(
helpText("Create a bar plot by choosing your department of interest"),
selectInput("department",
label = "choose a department to display",
choices = department.name,
selected = "Aeronautics & Astronautics"),
helpText(p('By choosing the time range, the plot will only display the department of
your interest within that time range.')),
selectInput("time",
label = "choose a time range to display",
choices = c('2010', '2011', '2012', '2013', '2014', '2015'),
selected = '2010'),
),
mainPanel(plotlyOutput("chart"))
)
))
runApp()
runApp()
runApp()
PlotChart(lala, 'Aeronautics & Astronautics', '2010')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
